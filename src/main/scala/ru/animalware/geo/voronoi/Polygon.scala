package ru.animalware.geo.voronoi

case class Polygon(private val v: Set[Point], point: Point) {

  lazy val vertices = {

    def create(source: List[Point], result: List[Point]): List[Point] = source match {
      case Nil => result
      case x :: xs if result.size < 2 => create(xs, x +: result)
      case x :: xs =>

        def correctResult(result: List[Point]): List[Point] = {
          if (result.size < 2) x +: result
          else {
            val u = (result.head.x - result(1).x, result.head.y - result(1).y)
            val v = (x.x - result(1).x, x.y - result(1).y)
            if (u._1 * v._2 - u._2 * v._1 >= 0) x +: result
            else correctResult(result.tail)
          }
        }

        create(xs, correctResult(result))
    }

    val first = v.min
    create(v.toList.sortWith { (p1: Point, p2: Point) =>
      val atan1 = first.atan2With(p1)
      val atan2 = first.atan2With(p2)
      if (atan1 == atan2) first.distanceTo(p1) < first.distanceTo(p2)
      else atan1 < atan2
    }, List.empty)
  }
}