package ru.animalware.geo.voronoi

import java.awt.geom.{AffineTransform, Line2D, PathIterator}
import java.awt.image.BufferedImage
import java.awt.{BasicStroke, Color, RenderingHints}
import java.nio.file.Paths
import javax.imageio.ImageIO

import com.typesafe.scalalogging.Logger
import org.scalatest.FlatSpec
import org.scalatest.prop.TableDrivenPropertyChecks
import org.slf4j.LoggerFactory

import scala.util.Random

class FortunesSpec extends FlatSpec with TableDrivenPropertyChecks {

  val log = Logger(LoggerFactory.getLogger(this.getClass))
  val r = Random
  val min = -100
  val max = 100
  val siteSets = Table(("number", "sites"),
//    (1, List(Point(-50, -50),  // wrong cell is created for this site
//      Point(0, -50),
//      Point(50, -50),
//      Point(-50, 50),          // wrong cell is created for this site
//      Point(0, 50),
//      Point(50, 50))),
    (2, List(Point(-41.68075565584361, 62.685538713356806),
      Point(27.194379809219328, -11.015981107691616),
      Point(10.499837631621148, -11.070645551111326),
      Point(28.767053020215997, 7.860042276852525),
      Point(-53.16980861840979, 96.60956711124695),
      Point(-70.59558658205016, -71.1904813806276),
      Point(76.92316355300542, -72.84279487664713),
      Point(20.56516037019584, 48.99462044560349),
      Point(-49.297164214853375, -41.14049937759936),
      Point(-5.198326808297111, -93.62556635304378))),
    (3, List(Point(71.4964269433377, -91.47174686080959),
      Point(44.36401060228064, -90.21813137133228),
      Point(-44.572136485293036, 32.84184453639486),
      Point(-94.3528202550575, 77.92102686187721),
      Point(88.7171342339631, -48.884705534296934),
      Point(-60.630189463482196, 0.12813187273283688),
      Point(-25.052069594631618, 40.588453749218445),
      Point(-63.33542541625321, 64.45071872614),
      Point(48.93817191674202, -62.3651277796609),
      Point(71.71121171699707, 18.04524166835435))),
    (4, List(Point(56.416904085020604, -90.54939838319014),
      Point(71.45888052239627, -44.251996475418444),
      Point(43.79043404802053, -64.9051085565659),
      Point(-8.85456855864102, -14.520432871344639),
      Point(-74.62229256726832, -53.01910908658025),
      Point(12.770034027902199, 23.779558469803092),
      Point(94.62457224704696, -84.83488973369606),
      Point(-49.74687456374167, 60.73566530129085),
      Point(52.27186940704985, -4.236804521168679),
      Point(-18.096154974221747, 46.00492368168287))),
//    (5, List(Point(12.92814769342732, 15.414698831505007),
//      Point(-39.98633569041583, 55.114015414275855),
//      Point(28.1966162659553, 18.954364852607952),
//      Point(-61.79384648359698, -54.815199485502795),
//      Point(-6.864284731322584, -32.089773567989084),
//      Point(-86.08502264294458, 50.93632171018376),
//      Point(59.083561346097554, 4.684063154303544),
//      Point(93.77142178139792, 57.553341437059174),        // wrong corner coordinates are found for this site
//      Point(34.30266541084012, -17.42234350133127),
//      Point(12.223284223215131, -92.55966114879813))),
    (6, for (i <- 1 to 10) yield Point(min + (max - min) * r.nextDouble(), min + (max - min) * r.nextDouble())))

  forAll(siteSets) { (number: Int, sites: Iterable[Point]) =>

    sites.foreach { (p: Point) =>
      log.info(f"${p.x}, ${p.y}")
    }

    val voronoi = new Fortunes(sites).create()

    f"$number. Cells count" should "be equal to sites count" in {
      assertResult(sites.size)(voronoi.size)
    }

    f"$number. The Voronoy diagram" should "be saved as PDF" in {

      val width = 600
      val height = 600
      val voronoiPNG = f"target/voronoi_$number.png"
      val bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB)
      val g2d = bi.createGraphics()
      g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)
      g2d.setBackground(Color.white)
      g2d.clearRect(0, 0, width, height)
      g2d.transform(AffineTransform.getScaleInstance(2.5, 2.5))
      g2d.transform(AffineTransform.getTranslateInstance(100, 100))
      g2d.setColor(Color.blue)
      sites.foreach { (p: Point) =>
        g2d.fillOval(p.x.toInt, p.y.toInt, 1, 1)
      }
      g2d.setColor(Color.red)
      g2d.setStroke(new BasicStroke(0.5f))
      voronoi.foreach { (p: Polygon) =>
        val poly = new java.awt.Polygon(p.vertices.toArray.map(_.x.toInt), p.vertices.toArray.map(_.y.toInt), p.vertices.size)
        log.info(p.vertices.mkString(", "))
        log.info(p.point.toString)
        if (!poly.contains(p.point.x.toInt, p.point.y.toInt)) {
          val pi = poly.getPathIterator(null)
          var contains = false
          var point = (.0, .0)
          while (!pi.isDone && !contains) {
            val coords = new Array[Double](6)
            val segment = pi.currentSegment(coords)
            if (segment == PathIterator.SEG_LINETO) {
              contains = new Line2D.Double(point._1, point._2, coords(0), coords(1)).ptLineDist(p.point.x.toInt, p.point.y.toInt) == .0
            }
            if (segment == PathIterator.SEG_MOVETO || segment == PathIterator.SEG_LINETO) {
              point = (coords(0), coords(1))
            }
            pi.next()
          }
          assert(contains)
        }
        g2d.draw(poly)
      }
      ImageIO.write(bi, "png", Paths.get(voronoiPNG).toFile)
    }
  }
}